import sys
import random
import argparse
import requests
import socket
from scapy.all import *


def sub_enumerate(arg):
    subs = wordlist(args.wordlist).splitlines()
    loading = "|/-\\-"
    n = 0

    for sub in subs:
        sub_domains = f"http://{sub}.{arg}" 
        try:
            requests.get(sub_domains)
        except requests.ConnectionError:
            sys.stdout.write("\rSearching " + loading[random.randint(0, 4) % len(loading)])
            sys.stdout.flush()
            pass
        else:
            print("\rValid domain: ",sub_domains)
            n+=1 
    print(f"\rFound domains: {n}")
    
def dir_enumerate(arg):
    dirs = wordlist(args.wordlist).splitlines()
    loading = "|/-\\-"
    n = 0

    for dir in dirs:
        dir_enum = f"http://{arg}/{dir}.html" 
        req = requests.get(dir_enum)
        if req.status_code==404:
            sys.stdout.write("\rSearching " + loading[random.randint(0, 4) % len(loading)])
            sys.stdout.flush()
        elif req.status_code==403:
            print(f'Access to {dir} is forbidden')
            print('')
            n+=1
        else:
            print("\rValid directory:" ,dir_enum)
            n+=1
    print(f"\rFound directories: {n}")

def host_scan(arg)
    interface = "eth0"
    ip_range = arg
    broadcastMac = "ff:ff:ff:ff:ff:ff"

    packet = Ether(dst=broadcastMac)/ARP(pdst = ip_range) 

    ans, unans = srp(packet, timeout =2, iface=interface, inter=0.1)

    for send,receive in ans:
            print (receive.sprintf(r"%Ether.src% - %ARP.psrc%")) 

def port_scan(arg):
    ip = '192.168.1.6' 
    open_ports =[] 

    ports = range(1, 65535)

    def probe_port(ip, port, result = 1): 
        try: 
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
            sock.settimeout(0.5) 
            r = sock.connect_ex((ip, port))   
            if r == 0: 
                result = r 
            sock.close() 
        except Exception as e: 
            pass 
        return result

    for port in ports: 
        sys.stdout.flush() 
        response = probe_port(ip, port) 
        if response == 0: 
            open_ports.append(port) 
        

    if open_ports: 
        print ("Open Ports are: ") 
        print (sorted(open_ports)) 
    else: 
        print ("Looks like no ports are open :(")

def wordlist(args):
        try:
            wordlist = open(args).read()
        except TypeError:
            print("You need to specify wordlist to use")
            sys.exit()
        except FileNotFoundError:
            print("Wordlist not found. Check filename, path or extension.")
            sys.exit()
        finally: 
            return wordlist

parser = argparse.ArgumentParser()
parser.add_argument('-w', '--wordlist', help='specifying wordlist for enumeration')
parser.add_argument('-e', '--enumerate', help='subdomain enumeration')
parser.add_argument('-d', '--dir', help='directory enumeration')
parser.add_argument('-h', '--hosts', help='network hosts arp scan')
parser.add_argument('-p', '--ports', help='target ports scan')
args = parser.parse_args(['-d', 'google.pl', '-w', 'doms.txt'])
print(args)

if args.enumerate:
    sub_enumerate(args.enumerate)
elif args.dir:
    dir_enumerate(args.dir)
elif args.hosts:
    host_scan(args.hosts)
elif args.ports:
    port_scan(arg.ports)